var documenterSearchIndex = {"docs":
[{"location":"openshift/web-user-interface/#Deploying-the-Application-via-Web-User-Interface","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"","category":"section"},{"location":"openshift/web-user-interface/#Creating-a-Project","page":"Deploying the Application via Web User Interface","title":"Creating a Project","text":"","category":"section"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"This section explores how to use the Rahti Web User Interface to deploy an application. We can log in and press Create Project with a unique name that we denote with <project>, which you should substitute with the actual name.","category":"page"},{"location":"openshift/web-user-interface/#Deploying-the-Application","page":"Deploying the Application via Web User Interface","title":"Deploying the Application","text":"","category":"section"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"We need to build a container image for the application to deploy it on OpenShift. OpenShift is capable of building container images in the cloud. To perform the build, we need to login to Rahti Container Registry and create an empty image stream for our application with the following parameters.","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Name: genie\nProject: <project>\nPopulate: Create empty image stream","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Next, we should switch to the Rahti Web User Interface and choose the project. Then, we can build the container image from the specified GitHub repository to the empty image stream on Rahti Container Registry using a build configuration.  Start by selecting Import YAML/JSON, then copying and pasting the YAML configuration below.","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"apiVersion: v1\nkind: BuildConfig\nmetadata:\n  name: genie\nspec:\n  runPolicy: Serial\n  source:\n    git:\n      uri: 'https://github.com/csc-training/GenieWebApp.jl'\n  strategy:\n    type: Docker\n  output:\n    to:\n      kind: ImageStreamTag\n      name: 'genie:latest'","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"The OKD documentation explains the build configurations in How Builds Work. Next, we need to initiate the container image build by navigating to the Builds tab, selecting genie build, and pressing Start Build. Once OpenShift has completed the build, we can deploy the image by selecting Deploy Image from the Add to Project menu and then deploying an Image Stream Tag with the following parameters:","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Namespace: <project>\nImage Stream: genie\nTag: latest","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Now, we have the application running on OpenShift.","category":"page"},{"location":"openshift/web-user-interface/#Creating-a-Secure-Route","page":"Deploying the Application via Web User Interface","title":"Creating a Secure Route","text":"","category":"section"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"By creating a route, we can expose the application to the internet. We can create a new route by selecting Create Route with the following parameters.","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Name: genie\nHostname: genie.rahtiapp.fi\nPath: /\nService: genie\nTarget Port: 8000 â†’ 8000 (TCP)\nSecurity: Secure route\nTLS Termination: Edge\nInsecure Traffic: Redirect","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"By selecting Secure Route, we enforce a secure connection via HTTPS. Therefore, our application should now be available under the address https://genie.rahtiapp.fi.","category":"page"},{"location":"openshift/web-user-interface/#Setting-Up-Persistent-Storage","page":"Deploying the Application via Web User Interface","title":"Setting Up Persistent Storage","text":"","category":"section"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"We can set up persistent storage to the application by selecting Storage and then Create Storage with the following parameters:","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Storage class: glusterfs-storage\nName: genie-volume\nAccess Mode: Shared Access (RWX)","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Next, we select Applications, then Deployments, and finally your Genie application deployment. From the Actions menu, select Add Storage with the following parameters:","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Storage: genie-volume\nMount path: /home/genie/app/data","category":"page"},{"location":"openshift/web-user-interface/","page":"Deploying the Application via Web User Interface","title":"Deploying the Application via Web User Interface","text":"Now the persistent storage is mounted inside the Genie application's data directory.","category":"page"},{"location":"openshift/deletion/#Deleting-the-Application","page":"Deleting the Application","title":"Deleting the Application","text":"","category":"section"},{"location":"openshift/deletion/","page":"Deleting the Application","title":"Deleting the Application","text":"We can delete our application once we no longer need it.","category":"page"},{"location":"openshift/deletion/#Command-Line-Interface","page":"Deleting the Application","title":"Command Line Interface","text":"","category":"section"},{"location":"openshift/deletion/","page":"Deleting the Application","title":"Deleting the Application","text":"We can remove all resources associated with the application.","category":"page"},{"location":"openshift/deletion/","page":"Deleting the Application","title":"Deleting the Application","text":"oc delete all -l app=$APP","category":"page"},{"location":"openshift/deletion/","page":"Deleting the Application","title":"Deleting the Application","text":"Now, we have removed the application.","category":"page"},{"location":"openstack/deletion/#Deleting-the-Application-and-Virtual-Machine","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"","category":"section"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"We can delete our application once we no longer need it.","category":"page"},{"location":"openstack/deletion/#Command-Line-Interface","page":"Deleting the Application and Virtual Machine","title":"Command Line Interface","text":"","category":"section"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"First, we need to connect to the virtual machine, stop the Genie application and Nginx, and then unmount the persistent storage volume.","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"sudo umount /dev/vdb","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"Then, let's disconnect from the virtual machine. Now, we can detach the persistent storage from the virtual machine.","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"openstack server remove volume $SERVER_NAME $VOLUME_NAME","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"Next, we can remove the virtual machine.","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"openstack server delete $SERVER_NAME","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"Finally, we can remove the floating IP.","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"openstack floating ip delete $FLOATING_IP","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"Additionally, we can remove the persistent storage. Removing the persistent storage will destroy the database and logs.","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"openstack volume delete $VOLUME_NAME","category":"page"},{"location":"openstack/deletion/","page":"Deleting the Application and Virtual Machine","title":"Deleting the Application and Virtual Machine","text":"Now, we have deleted the application and virtual machine.","category":"page"},{"location":"genie/testing/#Testing-the-Application","page":"Testing the Application","title":"Testing the Application","text":"","category":"section"},{"location":"genie/testing/#HTTP-Basics","page":"Testing the Application","title":"HTTP Basics","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"As an introduction to HTTP, we recommend reading the HTTP section of Mozilla Developer Network (MDN) documentation. Especially, about the structure of HTTP messages, request methods and response status codes.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"Let's start a Genie server on port 8000 for our application.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"pkg> activate .\njulia> using Genie\njulia> Genie.loadapp()\njulia> up(8000)","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can create requests to the server by accessing URLs in the browser. Alternatively, we can send requests directly to the server using the HTTP.jl library.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> using HTTP\njulia> base = \"http://localhost:8000\"","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"The base variable should point to the base URL where we host our application, such as localhost or server where have deployed the application.","category":"page"},{"location":"genie/testing/#HTML-Views","page":"Testing the Application","title":"HTML Views","text":"","category":"section"},{"location":"genie/testing/#Listing-All-Items","page":"Testing the Application","title":"Listing All Items","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"By sending a GET request to the /items the server returns the HTML that shows the Items page.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> HTTP.request(\"GET\", \"$(base)/items\")","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"HTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nServer: Genie/Julia/1.6.1\nTransfer-Encoding: chunked\n\n<!DOCTYPE html>...\"\"\"","category":"page"},{"location":"genie/testing/#Adding-New-Items","page":"Testing the Application","title":"Adding New Items","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"warning: Warning\nCurrently, posting forms programmatically does not work for an unknown reason.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can also POST forms programmatically.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> form = HTTP.Form(Dict(\"a\"=>\"Hello World\", \"b\"=>\"1\"))\njulia> HTTP.request(\"POST\", \"$(base)/items\", [], form)","category":"page"},{"location":"genie/testing/#JSON-API","page":"Testing the Application","title":"JSON API","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We have also implemented a JSON-based API on the application on the path /api/items. The API is intended for programmatic use and access to the application. We will use the JSON3 library for encoding Julia data structures into JSON payloads.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> using JSON3","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"Internally, a Genie application maps posted JSON objects to defined Julia data structures.","category":"page"},{"location":"genie/testing/#Retrieving-All-Items","page":"Testing the Application","title":"Retrieving All Items","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can request all items from the API.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> HTTP.request(\"GET\", \"$(base)/api/items\")","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We receive an HTTP response with application/json content type in the header and a JSON object in the body.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"HTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nServer: Genie/Julia/1.6.1\nTransfer-Encoding: chunked\n\n[{\"id\":{\"value\":1},\"a\":\"Hello World\",\"b\":1}]\"\"\"","category":"page"},{"location":"genie/testing/#Adding-New-Items-2","page":"Testing the Application","title":"Adding New Items","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can also add new item by sending a JSON-formatted payload to the API.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> payload = JSON3.write(Dict(:a=>\"Hello World\", :b=>1))\njulia> HTTP.request(\"POST\", \"$(base)/api/items\",\n           [(\"Content-Type\", \"application/json\")], payload)","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"HTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 201 Created\nContent-Type: application/json; charset=utf-8\nServer: Genie/Julia/1.6.1\nTransfer-Encoding: chunked\n\n\"Created\"\"\"\"","category":"page"},{"location":"genie/testing/#Retrieving-a-Specific-Item","page":"Testing the Application","title":"Retrieving a Specific Item","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can query a specific item using the API.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> HTTP.request(\"GET\", \"$(base)/api/items/1\")","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"HTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nServer: Genie/Julia/1.6.1\nTransfer-Encoding: chunked\n\n{\"id\":{\"value\":1},\"a\":\"Hello World\",\"b\":1}\"\"\"","category":"page"},{"location":"genie/testing/#Updating-a-Specific-Item","page":"Testing the Application","title":"Updating a Specific Item","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can also update a specific item using the API.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> payload = JSON3.write(Dict(:a=>\"Hello World Again\", :b=>2))\njulia> HTTP.request(\"PUT\", \"$(base)/api/items/1\",\n           [(\"Content-Type\", \"application/json\")], payload)","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"HTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nServer: Genie/Julia/1.6.1\nTransfer-Encoding: chunked\n\n\"\"\"\"\"","category":"page"},{"location":"genie/testing/#Removing-Specific-Item","page":"Testing the Application","title":"Removing Specific Item","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"Finally, we can remove a specific item using the API.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"julia> HTTP.request(\"DELETE\", \"$(base)/api/items/1\")","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"HTTP.Messages.Response:\n\"\"\"\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nServer: Genie/Julia/1.6.1\nTransfer-Encoding: chunked\n\n\"Deleted\"\"\"\"","category":"page"},{"location":"genie/testing/#Unit-Tests","page":"Testing the Application","title":"Unit Tests","text":"","category":"section"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"We can run the unit tests.","category":"page"},{"location":"genie/testing/","page":"Testing the Application","title":"Testing the Application","text":"(@v1.6) pkg> activate .\n(GenieWebApp) pkg> test","category":"page"},{"location":"genie/development/#Building-an-MVC-Application","page":"Building an MVC Application","title":"Building an MVC Application","text":"","category":"section"},{"location":"genie/development/#Introduction","page":"Building an MVC Application","title":"Introduction","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"This page explores how to build an MCV application from scratch with Genie framework similar to csc-training/GenieWebApp.jl. Of course, you can clone the ready-made application and play with it. However, we recommend building your application from scratch and mimicking individual elements from the ready-made application to learn how web applications operate, which will help you to understand cloud computing better.","category":"page"},{"location":"genie/development/#Installing-the-Julia-Language","page":"Building an MVC Application","title":"Installing the Julia Language","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We should begin by installing Julia language from their website and add the julia binary to the path. Then, on the project directory, we can open the Julia REPL with julia command. The Julia REPL has four different modes:","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"The Julia mode julia> for executing Julia code.\nThe package manager mode pkg> for executing package manager commands. We can activate it by pressing the right square bracket key ].\nThe help mode help?> for printing help and documentation. We can activate it by pressing the question mark key ?.\nThe shell mode shell> for executing shell commands. We can activate it by pressing the semicolon key ;.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We can press backspace to exit back to Julia mode. In this tutorial, we use the Julia and package manager modes.","category":"page"},{"location":"genie/development/#Code-Editor-for-Julia","page":"Building an MVC Application","title":"Code Editor for Julia","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"As a code editor, we recommend using Julia for Visual Studio Code. First, we need to add the path to our Julia executable to the JSON settings, which we can open with the command Open Settings JSON. You need to replace the path below with your path.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"{\n  // ... other settings ...\n  \"julia.executablePath\": \"~/bin/julia-1.6.1/bin/julia\",\n}","category":"page"},{"location":"genie/development/#Installing-Genie-Package","page":"Building an MVC Application","title":"Installing Genie Package","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Next, we can install Genie using Julia's built-in package manager.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"(@v1.6) pkg> add Genie","category":"page"},{"location":"genie/development/#Generating-a-New-MVC-Application","page":"Building an MVC Application","title":"Generating a New MVC Application","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We can create a new Genie Model-View-Controller (MCV) application using Genie's generator.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> using Genie\njulia> Genie.newapp_mvc(\"GenieWebApp\"; autostart=false)","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Choose 1 for the database options to use the SQLite database for development, testing, and production. Then, the generator creates file structure, configurations and adds database support. Additionally, it is a convention to name Julia packages with .jl extension. So let's add the .jl extension to the GenieWebApp directory.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> mv(\"GenieWebApp\", \"GenieWebApp.jl\")","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Now, our Genie application has a directory structure as below.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"GenieWebApp.jl\nâ”œâ”€â”€ app\nâ”œâ”€â”€ bin\nâ”œâ”€â”€ bootstrap.jl\nâ”œâ”€â”€ config\nâ”œâ”€â”€ db\nâ”œâ”€â”€ Manifest.toml\nâ”œâ”€â”€ Project.toml\nâ”œâ”€â”€ public\nâ”œâ”€â”€ routes.jl\nâ”œâ”€â”€ src\nâ””â”€â”€ test","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Finally, let's change our working directory to the application directory.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> cd(\"GenieWebApp.jl\")","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Next, let's configure our database connection.","category":"page"},{"location":"genie/development/#Configuring-Database-Connection","page":"Building an MVC Application","title":"Configuring Database Connection","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Our Genie application stores its database configurations to db/ directory. There, we can configure SQLite for development, production, and test environments by opening the db/connection.yml file and setting the adapter and database variables as below.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"dev:\n  adapter: SQLite\n  database: data/dev.sqlite\n  # ...\n\nprod:\n  adapter: SQLite\n  database: data/prod.sqlite\n  # ...\n\ntest:\n  adapter: SQLite\n  database: data/test.sqlite\n  # ...","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"If the database file doesn't exist, Genie will create it automatically when we start a server.","category":"page"},{"location":"genie/development/#Setting-Global-Configurations","page":"Building an MVC Application","title":"Setting Global Configurations","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Configurations executed in all environments are called global configurations stored in the config/env/global.jl file. In global configurations, we should include automatically creating secrets file as below.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"using Genie\nGenie.Generator.write_secrets_file()","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Also, we should include automatically configuring database migrations. That is, setting up database tables if they don't exist as below.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"using SearchLight\nusing SearchLightSQLite\n\n# Connect to database\nSearchLight.Configuration.load() |> SearchLight.connect\ntry\n    # Run migrations if they don't exist\n    SearchLight.Migrations.create_migrations_table()\n    SearchLight.Migrations.last_up()\ncatch\n    nothing\nend","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We are now ready to start developing our application.","category":"page"},{"location":"genie/development/#Running-the-Application","page":"Building an MVC Application","title":"Running the Application","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We should instantiate the web application to install it locally with Julia's built-in package manager when running it for the first time. Instantiation will create the Manifest.toml file.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"(@v1.6) pkg> instantiate","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Then, we need to activate the web application so that we can run and develop it.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"(@v1.6) pkg> activate .","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"The package manager mode should change the environment to GenieWebApp. We can execute the status command to see the packages installed in the current environment.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"(GenieWebApp) pkg> status","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"     Project GenieWebApp v0.1.0\n      Status `~/scratch/GenieWebApp.jl/Project.toml`\n  [c43c736e] Genie v3.0.0\n  [6d011eab] Inflector v1.0.1\n  [e6f89c97] LoggingExtras v0.4.7\n  [739be429] MbedTLS v1.0.3\n  [340e8cb6] SearchLight v1.0.2\n  [21a827c4] SearchLightSQLite v1.0.0\n  [ade2ca70] Dates\n  [56ddb016] Logging","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Next, let's load our Genie application for developing and running it.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> using Genie\njulia> Genie.loadapp(\".\")","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Now, we can run a local web server on port 8000.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> up(8000)","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We can access the local web server via http://localhost:8000/. Finally, when we have finished exploring our application, we can shut down the server.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> down()","category":"page"},{"location":"genie/development/#Adding-a-New-Resource","page":"Building an MVC Application","title":"Adding a New Resource","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"We can create new resources using a Genie generator. For example, we can create a resource named Items.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"julia> Genie.newresource(\"Items\")","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"The function generates a directory structure as follows.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"app/resources/items/\nâ”œâ”€â”€ ItemsController.jl\nâ”œâ”€â”€ Items.jl\nâ”œâ”€â”€ ItemsValidator.jl\nâ””â”€â”€ views","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Additionally, it also creates a database migration.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"db/migrations/\nâ””â”€â”€ <id>_create_table_items.jl","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Items.jl contains the database models. Inside Items.jl, we have created an Item model, a mapping between objects in the database and Julia structs. We should write an appropriate migration for the Item model to <id>_create_table_items.jl.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"ItemsController.jl contains functions for handling requests by the users. We should create the related view template files to the views directory. For example, we might have the following view templates.","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"app/resources/items/views/\nâ”œâ”€â”€ item.jl.html\nâ””â”€â”€ item_list.jl.html","category":"page"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"ItemsValidator.jl handles database validation.","category":"page"},{"location":"genie/development/#Defining-Routes","page":"Building an MVC Application","title":"Defining Routes","text":"","category":"section"},{"location":"genie/development/","page":"Building an MVC Application","title":"Building an MVC Application","text":"Routes map requests to static resources in public/ or controllers that trigger dynamic resources, for example, ItemsController.jl. We can define routes in the routes.jl file. When a server is running, it requests a route that invokes the corresponding handler function in the resources and returns a response based on its output. After defining routes, our basic application setup is complete.","category":"page"},{"location":"openstack/web-user-interface/#Setting-up-a-Virtual-Machine-via-Web-User-Interface","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"","category":"section"},{"location":"openstack/web-user-interface/#Login","page":"Setting up a Virtual Machine via Web User Interface","title":"Login","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Once we have access to Pouta, we should log in to the Pouta Web User Interface. Then, we can follow the instructions on launching a virtual machine in the cPouta web interface.","category":"page"},{"location":"openstack/web-user-interface/#Configuring-SSH-Keys","page":"Setting up a Virtual Machine via Web User Interface","title":"Configuring SSH Keys","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"We can create SSH keys in the web interface by navigating to Compute, then Key Pairs and selecting Create Key Pair. Next, give the key pair name denoted by the variable KEY_NAME and save the downloaded $KEY_NAME.pem file to your home directory. Then, on the command line, move to the home directory, create .ssh directory with read, write and execute privileges for the user if it doesn't exist, and move your key file into it.","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"mkdir -p ~/.ssh\nchmod 700 ~/.ssh","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"mv $KEY_NAME.pem ~/.ssh","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Next, protect the key with a password.","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"ssh-keygen -p -f ~/.ssh/$KEY_NAME.pem","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Then, change the key to read-only.","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"chmod 400 ~/.ssh/$KEY_NAME.pem","category":"page"},{"location":"openstack/web-user-interface/#Creating-a-Virtual-Machine","page":"Setting up a Virtual Machine via Web User Interface","title":"Creating a Virtual Machine","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"We will use a virtual machine with the Ubuntu 20.04 operating system. We can launch a virtual machine by navigating to Compute, then Instances, and select Launch Instance. Set the following parameters:","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"In the Details tab:\nAvailability Zone: nova\nInstance Name: genie\nFlavor: standard.tiny\nNumber of Instances: 1\nInstance Boot Source: Boot from image\nImage Name: Ubuntu-20.04\nIn Access & Security tab:\nKey Pair: $KEY_NAME\nSecurity Groups: default","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Finally, press Launch.","category":"page"},{"location":"openstack/web-user-interface/#Configuring-Security-Groups","page":"Setting up a Virtual Machine via Web User Interface","title":"Configuring Security Groups","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"We can manage internet access to our virtual machine by defining security groups and associating them with the virtual machine. We can set up firewalls and security groups by navigating to Network, then Security Groups.","category":"page"},{"location":"openstack/web-user-interface/#Creating-SSH-Group","page":"Setting up a Virtual Machine via Web User Interface","title":"Creating SSH Group","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Let's create a new security group by selecting Create Security Group and name it SSH. Then, select Manage Rules for the group and Add Rule with the following parameters:","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Rule: Custom TCP Rule\nDirection: Ingress\nOpen Port: Port\nPort: 22 (Default port for SSH connections.)\nRemote: CIDR\nCIDR: <ip-address>/32","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Substitute <ip-address> with your IP address which you can find out from ifconfig.me.","category":"page"},{"location":"openstack/web-user-interface/#Creating-HTTP-Group","page":"Setting up a Virtual Machine via Web User Interface","title":"Creating HTTP Group","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Next, let's create a security group named HTTP and add a rule with parameters.","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Rule: Custom TCP Rule\nDirection: Ingress\nOpen Port: Port\nPort: 80 (Default port for HTTP connections.)\nRemote: CIDR\nCIDR: 0.0.0.0/0","category":"page"},{"location":"openstack/web-user-interface/#Creating-HTTPS-Group","page":"Setting up a Virtual Machine via Web User Interface","title":"Creating HTTPS Group","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Finally, let's create HTTPS security group and add the rule with parameters:","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Rule: Custom TCP Rule\nDirection: Ingress\nOpen Port: Port\nPort: 443 (Default port for HTTPS connections.)\nRemote: CIDR\nCIDR: 0.0.0.0/0","category":"page"},{"location":"openstack/web-user-interface/#Adding-Groups-to-Virtual-Machine","page":"Setting up a Virtual Machine via Web User Interface","title":"Adding Groups to Virtual Machine","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"We can add security groups to a virtual machine by navigating to the Compute menu, then Instances, and in selecting Edit Security Groups from the menu next to Create Snapshot. We should add the SSH, HTTP, and HTTPS groups to our virtual machine. By including the SSH security group, we can connect to our virtual machine via SSH. Furthermore, by including HTTP and HTTPS security groups, we allow traffic from the internet to the web server and application deployed on the virtual machine.","category":"page"},{"location":"openstack/web-user-interface/#Configuring-a-Floating-IP","page":"Setting up a Virtual Machine via Web User Interface","title":"Configuring a Floating IP","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Associating the virtual machine with a floating IP, that is, a public IP, allows users to connect to it with the methods we have set on the security groups. To create and associate a public IP, navigate to the menu next to Create Snapshot and select Associate Floating IP. Then, on the IP Address field, click the plus sign to allocate a new floating IP. Once allocated, select the created floating IP and press Associate. We denote the value of the floating IP as FLOATING_IP.","category":"page"},{"location":"openstack/web-user-interface/#Configuring-Persistent-Storage","page":"Setting up a Virtual Machine via Web User Interface","title":"Configuring Persistent Storage","text":"","category":"section"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"We can also persistent storage to the virtual machine by navigating to Volumes, then Volumes, and selecting Create Volume with the following parameters:","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"Volume Name: genie\nVolume Source: No source, Empty volume\nType: Standard\nSize: 1 GiB\nAvailability Zone: nova","category":"page"},{"location":"openstack/web-user-interface/","page":"Setting up a Virtual Machine via Web User Interface","title":"Setting up a Virtual Machine via Web User Interface","text":"From the menu next to Edit Volume, select Manage Attachments and then attach the volume to the genie virtual machine.","category":"page"},{"location":"openstack/command-line-interface/#Setting-up-a-Virtual-Machine-via-Command-Line-Interface","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"","category":"section"},{"location":"openstack/command-line-interface/#Setting-up-the-OpenStack-Client","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up the OpenStack Client","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We can install the OpenStack client using Python. Let's install the Miniconda package manager which includes Python.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"python --version","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Python 3.9.1","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we can install the client using pip.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"pip install python-openstackclient","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Check your installation by calling OpenStack with version flag.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack --version","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack 5.5.0","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Download RC file using the Web User Interface. Then, activate the script.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"source <project-name>-openrc.sh","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"The prompt will ask your CSC username and password.","category":"page"},{"location":"openstack/command-line-interface/#Configuring-SSH-Keys","page":"Setting up a Virtual Machine via Command Line Interface","title":"Configuring SSH Keys","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Create a new for your SSH key.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"KEY_NAME=\"openstack-mydevice\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Create .ssh directory to your home directory with read and write privileges for the user.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"mkdir -p ~/.ssh\nchmod 700 ~/.ssh","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We can list files and directories on our home directory and select .ssh directory using the command ls -la ~ | grep ssh. Output should be similar to the text below.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"drwx------.  2 <user> <group> 4096 Aug 18 08:17 .ssh","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we can create the key pair with OpenStack client and store it into the .ssh directory.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack keypair create $KEY_NAME > ~/.ssh/$KEY_NAME.pem","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We should also protect the SSH key with a password.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"ssh-keygen -p -f ~/.ssh/$KEY_NAME.pem","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, change the key to read-only.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"chmod 400 ~/.ssh/$KEY_NAME.pem","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We can verify the privileges of the key using the command ls -la ~/.ssh | grep $KEY_NAME.pem. Output should be similar to the text below.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"-r--------.  1 <user> <group> 1676 Aug 17 08:51 $KEY_NAME.pem","category":"page"},{"location":"openstack/command-line-interface/#Creating-a-Virtual-Machine","page":"Setting up a Virtual Machine via Command Line Interface","title":"Creating a Virtual Machine","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"To select which virtual machine we want to use, we can list the available images in YAML format as below. We use YAML format because it is easy to read and concise.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack image list -f yaml","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Similarly, we can list the available flavors.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack flavor list -f yaml","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Next, we should define a name for our virtual machine.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"SERVER_NAME=\"genie\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we will choose to create a virtual machine with Ubuntu 20.04 image, with standard tiny flavor using the previously defined name and SSH key.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack server create $SERVER_NAME \\\n    --image=\"Ubuntu-20.04\" \\\n    --flavor=\"standard.tiny\" \\\n    --key-name=$KEY_NAME","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We can list all of our virtual machines as below.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack server list -f yaml","category":"page"},{"location":"openstack/command-line-interface/#Configuring-Security-Groups","page":"Setting up a Virtual Machine via Command Line Interface","title":"Configuring Security Groups","text":"","category":"section"},{"location":"openstack/command-line-interface/#Creating-SSH-Group","page":"Setting up a Virtual Machine via Command Line Interface","title":"Creating SSH Group","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We will name the SSH group SSH.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"SSH_GROUP=\"SSH\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we can create a new security group with the name.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack security group create $SSH_GROUP","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"For security reasons we want that only our IP address can connect to the virtual machine with SSH. We can retrieve our IP address and bind it to a variable from the command line as follows.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"REMOTE_IP=`curl https://ifconfig.me`","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, we can add a new rule to the SSH security group, which allows only SSH connections from our IP address to the virtual machine.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack security group rule create $SSH_GROUP \\\n    --proto=\"tcp\" \\\n    --remote-ip=\"$REMOTE_IP/32\" \\\n    --dst-port=\"22\"","category":"page"},{"location":"openstack/command-line-interface/#Creating-HTTP-Group","page":"Setting up a Virtual Machine via Command Line Interface","title":"Creating HTTP Group","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We will name the HTTP group as HTTP.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"HTTP_GROUP=\"HTTP\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we can create the HTTP group.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack security group create $HTTP_GROUP","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, we will add a rule that allows traffic from all IPs to the port 80, the default for HTTP traffic.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack security group rule create $HTTP_GROUP \\\n    --proto=\"tcp\" \\\n    --remote-ip=\"0.0.0.0/0\" \\\n    --dst-port=\"80\"","category":"page"},{"location":"openstack/command-line-interface/#Creating-HTTPS-Group","page":"Setting up a Virtual Machine via Command Line Interface","title":"Creating HTTPS Group","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We will name the HTTPS group as HTTPS.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"HTTPS_GROUP=\"HTTPS\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we can create the HTTPS group.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack security group create $HTTPS_GROUP","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, we will add a rule that allows traffic from all IPs to the port 443, the default for HTTPS traffic.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack security group rule create $HTTPS_GROUP \\\n    --proto=\"tcp\" \\\n    --remote-ip=\"0.0.0.0/0\" \\\n    --dst-port=\"443\"","category":"page"},{"location":"openstack/command-line-interface/#Adding-Groups-to-Virtual-Machine","page":"Setting up a Virtual Machine via Command Line Interface","title":"Adding Groups to Virtual Machine","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, we can add the security groups to our virtual machine.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack server add security group $SERVER_NAME $SSH_GROUP\nopenstack server add security group $SERVER_NAME $HTTP_GROUP\nopenstack server add security group $SERVER_NAME $HTTPS_GROUP","category":"page"},{"location":"openstack/command-line-interface/#Configuring-a-Floating-IP","page":"Setting up a Virtual Machine via Command Line Interface","title":"Configuring a Floating IP","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We can create a floating IP as below.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack floating ip create public -f yaml","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"The YAML formatted output will look similar to the text below.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"created_at: '2021-08-18T08:22:13Z'\n# ...\nfloating_ip_address: 128.214.252.233\nfloating_network_id: 26f9344a-2e81-4ef5-a018-7d20cff891ee\nid: 826e990f-220f-4c2c-b41a-c5205b314267\nname: 128.214.252.233\n# ...","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Alternatively, we can list all of our floating IPs.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack floating ip list -f yaml","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Output will look similar to the text below.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"- Fixed IP Address: null\n  Floating IP Address: 128.214.252.233\n  Floating Network: 26f9344a-2e81-4ef5-a018-7d20cff891ee\n  ID: 826e990f-220f-4c2c-b41a-c5205b314267\n  Port: null\n  Project: 418d555e93d04a1688f305ee19d41e56","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we can choose the created floating IP, by copying the value from the floating_ip_address or Floating IP Address field.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"FLOATING_IP=\"128.214.252.233\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, let's associate the floating IP with our virtual machine.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack server add floating ip $SERVER_NAME $FLOATING_IP","category":"page"},{"location":"openstack/command-line-interface/#Configuring-Persistent-Storage","page":"Setting up a Virtual Machine via Command Line Interface","title":"Configuring Persistent Storage","text":"","category":"section"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"We can create a persistent storage for our virtual machine. Let's start by naming it.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"VOLUME_NAME=\"genie-volume\"","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Now, we will create a persistent storage with size of 1 GB.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack volume create $VOLUME_NAME \\\n    --description=\"genie volume\" \\\n    --size=1","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"Finally, we can attach the storage to our virtual machine.","category":"page"},{"location":"openstack/command-line-interface/","page":"Setting up a Virtual Machine via Command Line Interface","title":"Setting up a Virtual Machine via Command Line Interface","text":"openstack server add volume $SERVER_NAME $VOLUME_NAME","category":"page"},{"location":"openshift/command-line-interface/#Deploying-the-Application-via-Command-Line-Interface","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We can deploy our application via the OpenShift Command Line Interface (CLI).","category":"page"},{"location":"openshift/command-line-interface/#Installing-the-Client","page":"Deploying the Application via Command Line Interface","title":"Installing the Client","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We should begin by downloading the OpenShift 3.11 origin and extract the archived file to $HOME/bin directory. Then, we should add the directory to the $PATH variable. In Linux, we can append the following line to our .bashrc file.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"export PATH=\"$HOME/bin/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/:$PATH\"","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"Now, we can test that your installation works by calling the help command.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc --help","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"The OKD 3.11 documentation explains how to use OpenShift with different commands.","category":"page"},{"location":"openshift/command-line-interface/#Login","page":"Deploying the Application via Command Line Interface","title":"Login","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"Let's login to OpenShift using the token obtained from the Web User Interface. We recommend to keep the web user interface open if you want to see visually how your deployment is progressing.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc login \"https://rahti.csc.fi:8443\" --token=<hidden>","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"Check OpenShift and Kubernetes versions.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc version","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc v3.11.0+0cbc58b\nkubernetes v1.11.0+d4cacc0\nfeatures: Basic-Auth GSSAPI Kerberos SPNEGO\n\nServer https://rahti.csc.fi:8443\nopenshift v3.11.0+7876dd5-361\nkubernetes v1.11.0+d4cacc0","category":"page"},{"location":"openshift/command-line-interface/#Creating-a-Project","page":"Deploying the Application via Command Line Interface","title":"Creating a Project","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We denote the user defined parameters using variables.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"PROJECT=\"app\"\nAPP=\"genie\"\nREPO=\"https://github.com/csc-training/GenieWebApp.jl\"","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We can create a new project.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc new-project $PROJECT","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"If a project already exists, we can change to existing project instead.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc project $PROJECT","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We can list existing projects","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc projects","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"You have one project on this server: \"app\".\n\nUsing project \"app\" on server \"https://rahti.csc.fi:8443\".","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We can show an overview of our current project.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc status","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"In project app on server https://rahti.csc.fi:8443\n\nYou have no services, deployment configs, or build configs.\nRun 'oc new-app' to create an application.","category":"page"},{"location":"openshift/command-line-interface/#Deploying-the-Application","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"Create new application, build the Docker container for the repository and deploy it to OpenShift","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc new-app $REPO --name=$APP","category":"page"},{"location":"openshift/command-line-interface/#Creating-a-Secure-Route","page":"Deploying the Application via Command Line Interface","title":"Creating a Secure Route","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We can expose the application to the internet by creating a Route.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc create route edge \\\n    --insecure-policy=\"Redirect\" \\\n    --service=$APP \\\n    --hostname=\"$APP.rahtiapp.fi\"","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"Application should now be available in https://$APP.rahtiapp.fi.","category":"page"},{"location":"openshift/command-line-interface/#Adding-Persistent-Storage","page":"Deploying the Application via Command Line Interface","title":"Adding Persistent Storage","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"We can create a persistent storage and mount it to the application with a Persistent Volume Claim (PVC).","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc set volume dc/$APP \\\n    --add \\\n    --name=\"volume-1\" \\\n    --type=\"PersistentVolumeClaim\" \\\n    --claim-name=\"genie-volume\" \\\n    --claim-mode=\"ReadWriteMany\" \\\n    --claim-size=\"1G\" \\\n    --mount-path=\"/home/genie/app/data\"","category":"page"},{"location":"openshift/command-line-interface/#Rebuilding-Application","page":"Deploying the Application via Command Line Interface","title":"Rebuilding Application","text":"","category":"section"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"If we update our application and want to propagate the changes to the server, can start a new build.","category":"page"},{"location":"openshift/command-line-interface/","page":"Deploying the Application via Command Line Interface","title":"Deploying the Application via Command Line Interface","text":"oc start-build $APP","category":"page"},{"location":"openshift/container/#Creating-Docker-Container-for-the-Application","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"","category":"section"},{"location":"openshift/container/#Creating-a-Dockerfile","page":"Creating Docker Container for the Application","title":"Creating a Dockerfile","text":"","category":"section"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Dockerfile defines how Docker builds a container image. We should also create a .dockerignore file which instructs Docker to ignore certain files such as automatically-generated files or version control (Git) files from the Docker image.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"We use julia:1.6-buster as the base image.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"FROM julia:1.6-buster","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Then, we create genie user inside the container.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"RUN useradd --create-home --shell /bin/bash genie","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Next, we create app directory inside the /home/genie directory, copy the application files into it while ignoring files specified in .dockerignore, and change our working directory to it.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"RUN mkdir /home/genie/app\nCOPY . /home/genie/app\nWORKDIR /home/genie/app","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Next, we give read, write and execution permissions and change ownership to the genie user with root group for the specified files. OpenShift requires permissions for the root group.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"RUN chgrp root /home/genie\nRUN chown genie:root -R *\nRUN chmod -R g+rw /home/genie/app\nRUN chmod g+rwX bin/server\nRUN chmod -R g+rwX /usr/local/julia","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Now, we change the user to genie with root group.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"USER genie:root","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"We specify environment variables for the Genie application with the ENV directive.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"ENV JULIA_DEPOT_PATH \"/home/genie/.julia\"\nENV GENIE_ENV \"prod\"\nENV HOST \"0.0.0.0\"\nENV PORT \"8000\"\nENV EARLYBIND \"true\"","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Now, we can install the application as a Julia package inside the container.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"RUN julia -e \"using Pkg; Pkg.activate(\\\".\\\"); Pkg.instantiate(); Pkg.precompile(); \"","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"We can remove the Julia registries afterward to reduce the container size.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"RUN rm -rf /genie/.julia/registries","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"We also need to give the root group execution permissions for files inside the .julia directory.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"RUN chmod -R -f g+rwX \\\n    /home/genie/.julia/packages \\\n    /home/genie/.julia/artifacts \\\n    /home/genie/.julia/compiled \\\n    /home/genie/.julia/logs","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"We will expose the container to networking using port 8000 via TCP.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"EXPOSE 8000/tcp","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"Finally, we set the container to execute the bin/server script to start the webserver when we run the container.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"CMD [\"bin/server\"]","category":"page"},{"location":"openshift/container/#Building-a-Docker-Image-Locally","page":"Creating Docker Container for the Application","title":"Building a Docker Image Locally","text":"","category":"section"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"We should begin by installing Docker. Then, we can build a Docker image locally using the build command. The option -t defines the name and tag for the image. We can substitute the <name> with a name such as genie and <tag> with latest.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"sudo docker build -t <name>:<tag> .","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"After building the image, we can run it locally with the run command. The option -p publishes the container port 8000 to host post 8000 in this order.","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"sudo docker run -it -p 8000:8000 --rm <name>:<tag>","category":"page"},{"location":"openshift/container/","page":"Creating Docker Container for the Application","title":"Creating Docker Container for the Application","text":"The local webserver should be running on http://localhost:8000/, and we can open it in the browser.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"CurrentModule = GenieWebApp","category":"page"},{"location":"#About-Web-Technologies-and-Cloud-Computing","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"","category":"section"},{"location":"#Goals","page":"About Web Technologies and Cloud Computing","title":"Goals","text":"","category":"section"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"Our goal with this tutorial is to demonstrate a practical, step-by-step approach for getting started with developing web applications with Julia language and Genie framework, deploying them on a cloud platform, and exposing them to users over the internet. As our deployment options, we explore traditional virtual machines and modern container platforms.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"We attempt to facilitate learning by first developing the web application locally, that is, on our personal computer, to demonstrate fundamental web technologies. From local development, it is easier to progress to deploying the application to the virtualized cloud environments, initially to a virtual machine and then to a container platform. Additionally, we begin by performing deployment steps manually using the web and command-line interfaces. Then, we progress towards automating them using a command-line interface and configuration management.","category":"page"},{"location":"#Why-Julia-Language?","page":"About Web Technologies and Cloud Computing","title":"Why Julia Language?","text":"","category":"section"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"Julia language is a relatively new, general-purpose programming language designed to address challenges in technical computing such as the expression problem and the two-language problem. It addresses the expression problem using multiple-dispatch as a paradigm that enables highly expressive syntax and composable code and the two-language problem using just-in-time compilation to create high-performance code. For these reasons, the Julia language is gaining popularity in scientific computing and data analysis because it offers significant improvements in performance and composability. That is, how existing code and libraries work with one another.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"Traditionally, scientific computing programs run without user interaction as batch jobs on computer clusters and supercomputers. However, modern scientific computing and data analytics increasingly requires user interaction. For example, an analytics application may receive data from multiple sources over the internet, process the data, perform analysis, store results, and offer them to end-users on demand via an API. We can expose the analytics application over the internet as an on-demand service by wrapping it inside a web application or microservice and deploying it into a cloud platform. Given the advantages of the Julia language, it would be natural to develop the analytics application and the web application or microservice in Julia language.","category":"page"},{"location":"#About-Cloud-Computing","page":"About Web Technologies and Cloud Computing","title":"About Cloud Computing","text":"","category":"section"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"For getting started with web application development and cloud computing, we assume basic knowledge of the Linux operating system, Git version control system, Julia language, and SQL databases. We recommend reading the Linux basics tutorial for understanding basic Linux command line usage. We will use the Rahti and Pouta cloud computing resources provided by CSC, the Science Center for IT in Finland. Their documentation explains the main concepts of cloud computing, such as how cloud computing differs from traditional hosted services and high-performance computing, and basic terminology such as infrastructure-, platform-, and software-as-service. If you are a part of Finnish research or higher education institutions, you can access many CSC services free of charge. If you plan to use CSC services, you can create a new project on My CSC and then apply for access to Pouta and Rahti. Otherwise, you can try a different cloud computing platform such as Amazon Web Services, Microsoft Azure, Google Cloud Platform, or Digital Ocean.","category":"page"},{"location":"#Developing-a-Genie-Application","page":"About Web Technologies and Cloud Computing","title":"Developing a Genie Application","text":"","category":"section"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"In the Developing a Genie Application section, we explain how to create a web application with Genie framework, a full-stack Model-View-Controller (MVC) web framework similar to Ruby-on-Rails and Django. You can watch the MVC explained in 4 minutes for an overview of how they work.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"We will use SQLite database as a backing service in our Genie application. SQLite runs as part of the application and writes the database into a single database file to a specified location on the file system, which we should mount to persistent storage. SQLite works well for applications with small amounts of concurrent writes to the database. However, we should use a client-Server database such as PostgreSQL and MySQL if we need to perform many concurrent writes.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"We recommend the MDN Web Docs as a general resource about web technologies, web development, and developer tools. Especially, the sections about essential web technologies such as HTTP and HTML are helpful.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"Another helpful resource is the REST API Tutorial website. It covers the design principles of REST API, an extensively used architectural style for distributed hypermedia systems, for example, web applications. In practice, it defines how we can interact with the system and access resources, such as web pages or files.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"Furthermore, we recommend The Twelve-Factor App guidelines for an overview of best practices of developing web applications. It explains best practices for configuring and deploying applications, automating these processes, and dealing with backing services such as databases.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"As a side note, it is also possible to develop microservices in Julia using the Julia SDK if you want to create a lightweight, customizable, single-purpose application without a front-end.","category":"page"},{"location":"#Deploying-to-Virtual-Machine-using-OpenStack-(v5.5)","page":"About Web Technologies and Cloud Computing","title":"Deploying to Virtual Machine using OpenStack (v5.5)","text":"","category":"section"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"In the Deploying with OpenStack section, we explain how to deploy the application manually from source to a virtual machine on the Pouta cloud service using OpenStack web interface and Linux command line on the virtual machine. We also show how to set persistent storage for the application.","category":"page"},{"location":"#Deploying-to-OpenShift-Container-Platform-(v3.11)","page":"About Web Technologies and Cloud Computing","title":"Deploying to OpenShift Container Platform (v3.11)","text":"","category":"section"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"In the Deploying with OpenShift section, we explain how to create a Docker container for the application and build and run a container image. Modern cloud architecture revolves around containers and container orchestration. We recommend reading the articles on Demystifying Containers to understand how containers work in Linux. We continue by explaining how to deploy the application's container image to the Rahti container platform using OpenShift web interface. We also show how to set persistent storage for the application.","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"","category":"page"},{"location":"","page":"About Web Technologies and Cloud Computing","title":"About Web Technologies and Cloud Computing","text":"Modules = [GenieWebApp]","category":"page"},{"location":"openstack/deployment/#Deploying-the-Application-to-a-Virtual-Machine","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"","category":"section"},{"location":"openstack/deployment/#Finding-Domain-Name","page":"Deploying the Application to a Virtual Machine","title":"Finding Domain Name","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We can find out the default hostname of our virtual machine using the host command on the public IP address.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"host $FLOATING_IP","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"15.253.214.128.in-addr.arpa domain name pointer vm3814.kaj.pouta.csc.fi.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We can also configure our own domain name by pointing DNS records to the virtual machine IP address. You read more about DNS services in cPouta in the docs.","category":"page"},{"location":"openstack/deployment/#Connecting-to-the-Virtual-Machine","page":"Deploying the Application to a Virtual Machine","title":"Connecting to the Virtual Machine","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Now, we can connect to our virtual machine using SSH with our SSH key.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"ssh ubuntu@$FLOATING_IP -i ~/.ssh/$KEY_NAME.pem","category":"page"},{"location":"openstack/deployment/#Attaching-the-Persistent-Volume","page":"Deploying the Application to a Virtual Machine","title":"Attaching the Persistent Volume","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Let's begin by creating a file system on the persistent volume.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo mkfs.xfs /dev/vdb","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Now can mount the persistent volume. Let's define a variable for the mount location, then create a directory to the mount location and finally mount the persistent volume to the mount location.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"VOLUME=/media/volume\nsudo mkdir -p $VOLUME\nsudo mount /dev/vdb $VOLUME","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We also need to change the ownership of the volume to the cloud user for reading and writing data.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo chown $USER:$USER $VOLUME","category":"page"},{"location":"openstack/deployment/#Installing-the-Julia-Language","page":"Deploying the Application to a Virtual Machine","title":"Installing the Julia Language","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Once we have connected to the virtual machine via SSH, we need to install Julia language and our Genie web application using the command line. So let's begin by installing the Julia language.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"# Set URL for downloading Julia binaries\nJULIA_URL=\"https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.2-linux-x86_64.tar.gz\"\n\n# Set name for the downloaded archive\nJULIA_ARCHIVE=\"$HOME/julia.tar.gz\"\n\n# Download the Julia language binaries\ncurl -o $JULIA_ARCHIVE $JULIA_URL\n\n# Uncompress (-z) and extract (-z) files (-f) from archive\ntar -x -z -f $JULIA_ARCHIVE\n\n# Remove the archive file after extraction\nrm $JULIA_ARCHIVE\n\n# Add symbolic link of Julia executable to /usr/bin so its found on the PATH\nsudo ln -s \"$HOME/julia-1.6.2/bin/julia\" \"/usr/bin/julia\"","category":"page"},{"location":"openstack/deployment/#Installing-the-Genie-Application","page":"Deploying the Application to a Virtual Machine","title":"Installing the Genie Application","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Next, we can install our Genie web application from GitHub.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"GH_USER=\"csc-training\"\nGH_REPO=\"GenieWebApp.jl\"\n\n# Define application directory\nexport GENIE_APP=\"$HOME/$GH_REPO\"\n\n# Clone the Genie application from the GitHub repository to HOME directory\ngit clone \"https://github.com/$GH_USER/$GH_REPO.git\" $GENIE_APP\n\n# Change directory to GenieWebApp.jl\ncd $GENIE_APP\n\n# Install GenieWebApp.jl as Julia package\njulia -e \"using Pkg; Pkg.activate(\\\".\\\"); Pkg.instantiate(); Pkg.precompile(); \"\n\n# Setup Genie environment variables\nexport GENIE_ENV=\"prod\"\nexport EARLYBIND=\"true\"\n\n# Give execution privileges to `bin/server` script\nchmod +x ./bin/server","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We should also link the data and log directories inside the Genie application to the persistent volume with symbolic links.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo mkdir -p $VOLUME/data\nsudo ln -s $VOLUME/data $GENIE_APP/data","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo mkdir -p $VOLUME/log\nsudo ln -s $VOLUME/log $GENIE_APP/log","category":"page"},{"location":"openstack/deployment/#Running-the-Genie-Application","page":"Deploying the Application to a Virtual Machine","title":"Running the Genie Application","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Next, we need to create a new Linux Screen for running the web server as a background process.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"screen -S genie","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Then, let's change our working directory to the Genie application directory.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"cd $GENIE_APP","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We will use a reverse proxy (Nginx) to serve static files and route dynamic content to Genie server. For this reason, modify configuration settings in the production environment in config/env/prod.jl such that the Genie server does not handle static files.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"const config = Settings(\n  server_port                     = 8000,\n  server_host                     = \"0.0.0.0\",\n  log_level                       = Logging.Error,\n  log_to_file                     = true,\n  # set to false when using reverse proxy\n  server_handle_static_files      = false\n)","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"On the new screen, let's execute the./bin/server script to start a server.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"./bin/server","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We can exit the screen by holding Ctrl and pressing a and then d key. We can retach the screen again by using the screen -r genie command if we need to.","category":"page"},{"location":"openstack/deployment/#Installing-and-Configuring-Nginx-Server","page":"Deploying the Application to a Virtual Machine","title":"Installing and Configuring Nginx Server","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We can install Nginx on Ubuntu using the Advanced Package Tool (APT).","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo apt-get update --yes\nsudo apt-get install nginx --yes\nsudo systemctl start nginx\nsudo systemctl enable nginx","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Next, we need to configure Nginx for our Genie application by creating a configuration file to the available sites directory. We can create the file using the nano editor.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo nano /etc/nginx/sites-available/genie","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"On the Nano editor, add the following Nginx configurations:","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"server {\n  listen 80;\n  listen [::]:80;\n  # Use default hostname or custom domain name.\n  # `host <public-ip>`\n  server_name  vm3814.kaj.pouta.csc.fi;\n  root         /home/ubuntu/GenieWebApp.jl/public;\n  index        welcome.html;\n  # Serve static content via Nginx\n  location ~ ^/(css|img|js)/genie {\n    root /home/ubuntu/GenieWebApp.jl/public;\n  }\n  location ~ ^(error-*.html|favicon.ico|robots.txt) {\n    root /home/ubuntu/GenieWebApp.jl/public;\n  }\n  # Serve dynamic content via Genie\n  location / {\n      proxy_pass http://localhost:8000/;\n  }\n}","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Next, we enable the configuration by creating a symbolic link for the configuration file to enable the sites directory.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo ln -s /etc/nginx/sites-available/genie /etc/nginx/sites-enabled/genie","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We should also remove the default site from enabled sites.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo rm -f /etc/nginx/sites-enabled/default","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Now, we can restart Nginx to make the configuration effective.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo systemctl restart nginx","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"The web application should be available via HTTP.","category":"page"},{"location":"openstack/deployment/#Enabling-HTTPS-with-Certbot","page":"Deploying the Application to a Virtual Machine","title":"Enabling HTTPS with Certbot","text":"","category":"section"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We can set up HTTPS for Nginx on Ubuntu 20.04 using Certbot. Before installing Certbot, we need to ensure that we have the latest version of the Snap package manager which comes preinstalled on Ubuntu 20.04.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo snap install core; sudo snap refresh core","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"We can install Certbot via Snap in classic mode.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo snap install --classic certbot","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Next, we make certbot command available in the command line by creating a symbolic link of the certbot executable to /usr/bin.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo ln -s /snap/bin/certbot /usr/bin/certbot","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"Now, we can use Certbot to retrieve a certificate and edit our Nginx configuration, turning on HTTPS access in a single step.","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"sudo certbot --nginx","category":"page"},{"location":"openstack/deployment/","page":"Deploying the Application to a Virtual Machine","title":"Deploying the Application to a Virtual Machine","text":"The web application should now be available via HTTPS.","category":"page"}]
}
