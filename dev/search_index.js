var documenterSearchIndex = {"docs":
[{"location":"deploying-to-virtual-machine-using-openstack/#Deploying-to-Virtual-Machine-using-OpenStack","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"info: Info\nIn this section, we manually configure a virtual machine, connect to it and set up a server. Manual performing these steps is an excellent way to learn how virtual machines work and understand how a web application operates from one. However, we should use containers and configuration management for deploying real production applications instead of manually deploying them.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Setting-up-a-Virtual-Machine","page":"Deploying to Virtual Machine using OpenStack","title":"Setting up a Virtual Machine","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Once we have access to Pouta, we should log in to the Pouta Web User Interface. Then, we can follow the instructions on launching a virtual machine in the cPouta web interface.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Setting-up-SSH-Keys","page":"Deploying to Virtual Machine using OpenStack","title":"Setting up SSH Keys","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can create SSH keys in the web interface by navigating to Compute, then Key Pairs and selecting Create Key Pair. Next, give the key pair name <keyname> and save the downloaded <keyname>.pem file to your home directory. Then, on the command line, move to the home directory, create .ssh directory with write privileges if it doesn't exist, and move your key file into it.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"cd ~\nmkdir -p .ssh\nchmod 700 .ssh\nmv <keyname>.pem .ssh","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, protect the key with a password and make it read-only.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"ssh-keygen -p -f .ssh/<keyname>.pem\nchmod 400 .ssh/<keyname>.pem","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Configuring-Security-Groups","page":"Deploying to Virtual Machine using OpenStack","title":"Configuring Security Groups","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can manage internet access to our virtual machine by defining security groups and associating them with the virtual machine. We can set up firewalls and security groups by navigating to Network, then Security Groups. Let's create a new security group by selecting Create Security Group and name it SSH. Then, select Manage Rules for the group and Add Rule with the following parameters:","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Rule: Custom TCP Rule\nDirection: Ingress\nOpen Port: Port\nPort: 22 (Default for SSH connections.)\nRemote: CIDR\nCIDR: <ip-address>/24 (Substitute <ip-address> with your IP address which you can find out from myipaddress.com.)","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, let's create a security group named HTTP and add a rule with parameters.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Rule: Custom TCP Rule\nDirection: Ingress\nOpen Port: Port\nPort: 80 (Default for HTTP connections.)\nRemote: CIDR\nCIDR: 0.0.0.0/0","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Finally, let's create HTTPS security group and add the rule with parameters:","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Rule: Custom TCP Rule\nDirection: Ingress\nOpen Port: Port\nPort: 443 (Default for HTTPS connections.)\nRemote: CIDR\nCIDR: 0.0.0.0/0","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Launching-a-Virtual-Machine","page":"Deploying to Virtual Machine using OpenStack","title":"Launching a Virtual Machine","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We will use a virtual machine with the Ubuntu 20.04 operating system. We can launch a virtual machine by navigating to Compute, then Instances, and select Launch Instance. Set the following parameters and press Launch:","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"In the Details tab:\nAvailability Zone: nova\nInstance Name: genie\nFlavor: standard.tiny\nNumber of Instances: 1\nInstance Boot Source: Boot from image\nImage Name: Ubuntu-20.04\nIn Access & Security tab:\nKey Pair: <keyname>\nSecurity Groups: SSH, HTTP, HTTPS","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"By including the SSH security group, we can connect to our virtual machine via SSH. Furthermore, by including HTTP and HTTPS security groups, we allow traffic from the internet to the web server and application deployed on the virtual machine.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Adding-a-Public-IP","page":"Deploying to Virtual Machine using OpenStack","title":"Adding a Public IP","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Associating the virtual machine with a public IP allows users to connect to it with the methods we have set on the security groups. To create and associate a public IP, navigate to the menu next to Create Snapshot and select Associate Floating IP. Then, on the IP Address field, click the plus sign to allocate a new floating IP. Once allocated, select the created floating IP and press Associate. We denote the value of the floating IP as <public-ip>.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Adding-Persistent-Storage","page":"Deploying to Virtual Machine using OpenStack","title":"Adding Persistent Storage","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can also persistent storage to the virtual machine by navigating to Volumes, then Volumes, and selecting Create Volume with the following parameters:","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Volume Name: genie\nVolume Source: No source, Empty volume\nType: Standard\nSize: 1 GiB\nAvailability Zone: nova","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"From the menu next to Edit Volume, select Manage Attachments and then attach the volume to the genie virtual machine.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Domain-Name","page":"Deploying to Virtual Machine using OpenStack","title":"Domain Name","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can find out the default hostname of our virtual machine using the host command on the public IP address.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"host <public-ip>","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"15.253.214.128.in-addr.arpa domain name pointer vm3814.kaj.pouta.csc.fi.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can also configure our own domain name by pointing DNS records to the virtual machine IP address. You read more about DNS services in cPouta in the docs.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Connecting-to-the-Virtual-Machine","page":"Deploying to Virtual Machine using OpenStack","title":"Connecting to the Virtual Machine","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Now, we can connect to our virtual machine using SSH with our SSH key.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"ssh ubuntu@<public-ip> -i ~/.ssh/<keyname>.pem","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Attaching-the-Persistent-Volume","page":"Deploying to Virtual Machine using OpenStack","title":"Attaching the Persistent Volume","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Let's begin by creating a file system on the persistent volume.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo mkfs.xfs /dev/vdb","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Now can mount the persistent volume. Let's define a variable for the mount location, then create a directory to the mount location and finally mount the persistent volume to the mount location.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"VOLUME=/media/volume\nsudo mkdir -p ${VOLUME}\nsudo mount /dev/vdb ${VOLUME}","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We also need to change the ownership of the volume to the cloud user for reading and writing data.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo chown ${USER}:${USER} ${VOLUME}","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Installing-the-Julia-Language","page":"Deploying to Virtual Machine using OpenStack","title":"Installing the Julia Language","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Once we have connected to the virtual machine via SSH, we need to install Julia language and our Genie web application using the command line. So let's begin by installing the Julia language.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"# Set URL for downloading Julia binaries\nJULIA_URL=\"https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.2-linux-x86_64.tar.gz\"\n\n# Set name for the downloaded archive\nJULIA_ARCHIVE=\"${HOME}/julia.tar.gz\"\n\n# Download the Julia language binaries\ncurl -o ${JULIA_ARCHIVE} ${JULIA_URL}\n\n# Uncompress (-z) and extract (-z) files (-f) from archive\ntar -x -z -f ${JULIA_ARCHIVE}\n\n# Remove the archive file after extraction\nrm ${JULIA_ARCHIVE}\n\n# Add symbolic link of Julia executable to /usr/bin so its found on the PATH\nsudo ln -s \"${HOME}/julia-1.6.2/bin/julia\" \"/usr/bin/julia\"","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Installing-the-Genie-Application","page":"Deploying to Virtual Machine using OpenStack","title":"Installing the Genie Application","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, we can install our Genie web application from GitHub.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"GH_USER=\"jaantollander\"\nGH_REPO=\"GenieWebApp.jl\"\n\n# Clone the Genie application from the GitHub repository to HOME directory\ngit clone \"https://github.com/${GH_USER}/${GH_REPO}.git\" ${HOME}/${GH_REPO}\n\n# Define application directory\nexport GENIE_APP=\"${HOME}/${GH_REPO}\"\n\n# Change directory to GenieWebApp.jl\ncd ${GENIE_APP}\n\n# Install GenieWebApp.jl as Julia package\njulia -e \"using Pkg; Pkg.activate(\\\".\\\"); Pkg.instantiate(); Pkg.precompile(); \"\n\n# Setup Genie environment variables\nexport GENIE_ENV=\"prod\"\nexport EARLYBIND=\"true\"\n\n# Give execution privileges to `bin/server` script\nchmod +x ./bin/server","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We should also link the data and log directories inside the Genie application to the persistent volume with symbolic links.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo mkdir -p ${VOLUME}/data\nsudo ln -s ${VOLUME}/data ${GENIE_APP}/data","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo mkdir -p ${VOLUME}/log\nsudo ln -s ${VOLUME}/log ${GENIE_APP}/log","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Running-the-Genie-Application","page":"Deploying to Virtual Machine using OpenStack","title":"Running the Genie Application","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, we need to create a new Linux Screen for running the web server as a background process.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"screen -S genie","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We will use Nginx reverse product to serve static files. For this reason, modify configuration settings in the production environment in config/env/prod.jl such that the Genie server does not handle static files.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"const config = Settings(\n  server_port                     = 8000,\n  server_host                     = \"0.0.0.0\",\n  log_level                       = Logging.Error,\n  log_to_file                     = true,\n  server_handle_static_files      = false  # set to false when using Nginx\n)","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"On the new screen, let's execute the./bin/server script to start a server.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"cd ${GENIE_APP}\n./bin/server","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can exit the screen by holding Ctrl and pressing a and then d key. We can retach the screen again by using the screen -r genie command if we need to.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Installing-and-Configuring-Nginx-Server","page":"Deploying to Virtual Machine using OpenStack","title":"Installing and Configuring Nginx Server","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can install Nginx on Ubuntu using the Advanced Package Tool (APT).","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo apt-get update --yes\nsudo apt-get install nginx --yes\nsudo systemctl start nginx\nsudo systemctl enable nginx","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, we need to configure Nginx for our Genie application by creating a configuration file to the available sites directory. We can create the file using the nano editor.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo nano /etc/nginx/sites-available/genie","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"On the Nano editor, add the following Nginx configurations:","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"server {\n  listen 80;\n  listen [::]:80;\n  # Use default hostname or custom domain name.\n  # `host <public-ip>`\n  server_name  vm3814.kaj.pouta.csc.fi;\n  root         /home/ubuntu/GenieWebApp.jl/public;\n  index        welcome.html;\n  # Serve static content via Nginx\n  location ~ ^/(css|img|js)/genie {\n    root /home/ubuntu/GenieWebApp.jl/public;\n  }\n  location ~ ^(error-*.html|favicon.ico|robots.txt) {\n    root /home/ubuntu/GenieWebApp.jl/public;\n  }\n  # Serve dynamic content via Genie\n  location / {\n      proxy_pass http://localhost:8000/;\n  }\n}","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, we enable the configuration by creating a symbolic link for the configuration file to enable the sites directory.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo ln -s /etc/nginx/sites-available/genie /etc/nginx/sites-enabled/genie","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We should also remove the default site from enabled sites.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo rm -f /etc/nginx/sites-enabled/default","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Now, we can restart Nginx to make the configuration effective.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo systemctl restart nginx","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"The web application should be available via HTTP.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/#Enabling-HTTPS-with-Certbot","page":"Deploying to Virtual Machine using OpenStack","title":"Enabling HTTPS with Certbot","text":"","category":"section"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can set up HTTPS for Nginx on Ubuntu 20.04 using Certbot. Before installing Certbot, we need to ensure that we have the latest version of the Snap package manager which comes preinstalled on Ubuntu 20.04.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo snap install core; sudo snap refresh core","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"We can install Certbot via Snap in classic mode.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo snap install --classic certbot","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Next, we make certbot command available in the command line by creating a symbolic link of the certbot executable to /usr/bin.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo ln -s /snap/bin/certbot /usr/bin/certbot","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"Now, we can use Certbot to retrieve a certificate and edit our Nginx configuration, turning on HTTPS access in a single step.","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"sudo certbot --nginx","category":"page"},{"location":"deploying-to-virtual-machine-using-openstack/","page":"Deploying to Virtual Machine using OpenStack","title":"Deploying to Virtual Machine using OpenStack","text":"The web application should now be available via HTTPS.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/#Deploying-to-Container-Cloud-using-OpenShift","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"","category":"section"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"info: Info\nThese instructions are written for Rahti with OKD3. The instructions need to be updated once OKD4 is released.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/#Pushing-the-Docker-Image-to-Container-Registry","page":"Deploying to Container Cloud using OpenShift","title":"Pushing the Docker Image to Container Registry","text":"","category":"section"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"We should log in to Rahti Container Registry, create a new project, and push the Docker image. Then, we can log in on the command line using the token provided by the web client.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"sudo docker login -p <token> -u unused docker-registry.rahti.csc.fi","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"Next, we should tag the locally built Docker image. Substitute <name> and <tag> with the same values as for the Docker image and <project> with the name of your Rahti project.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"sudo docker tag <name>:<tag> docker-registry.rahti.csc.fi/<project>/<name>:<tag>","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"Now, we can push the image to the Rahti Container Registry.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"sudo docker push docker-registry.rahti.csc.fi/<project>/<name>:<tag>","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"After we have uploaded the image, we are ready to deploy it.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/#Deploying-the-Container-Image","page":"Deploying to Container Cloud using OpenShift","title":"Deploying the Container Image","text":"","category":"section"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"After uploading a container image, we can log in to Rahti Web User Interface and deploy the image from the Rahti Container Registry by selecting Deploy Image. Then, we should create a new route by selecting Create Route, giving the route name, and selecting Secure Route to enforce a secure connection via HTTPS. Our application should now be available under the address https://route-project.rahtiapp.fi.","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/#Setting-Up-Persistent-Storage","page":"Deploying to Container Cloud using OpenShift","title":"Setting Up Persistent Storage","text":"","category":"section"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"We can set up persistent storage to data directory inside the application from Rahti Web User Interface as follows:","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"Select a project from My Projects or create a new project.\nSelect Storage and then Create Storage with the following parameters:\nStorage class: glusterfs-storage\nName: genie-data\nAccess Mode: Shared Access (RWX)\nThen select Applications > Deployments, then your Genie application deployment. The from Actions menu, select Add Storage with the following parameters:\nStorage: genie-data\nMount path: /home/genie/app/data","category":"page"},{"location":"deploying-to-container-cloud-using-openshift/","page":"Deploying to Container Cloud using OpenShift","title":"Deploying to Container Cloud using OpenShift","text":"Application on Docker container is mounted to /home/genie/app/.","category":"page"},{"location":"developing-genie-web-application/#Developing-a-Genie-Web-Application","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"","category":"section"},{"location":"developing-genie-web-application/#Installing-Julia-Language","page":"Developing a Genie Web Application","title":"Installing Julia Language","text":"","category":"section"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We should begin by installing Julia language from their website and add the julia binary to the path. On the project directory, we can open the Julia REPL with julia command.","category":"page"},{"location":"developing-genie-web-application/#Creating-MCV-Application","page":"Developing a Genie Web Application","title":"Creating MCV Application","text":"","category":"section"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We can create a new Genie Model-View-Controller (MCV) application using Genie's generator. The structure for this application is generated as follows:","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"using Genie; Genie.newapp_mvc(\"GenieWebApp\")","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"The generator creates file structure, configurations and adds database support. We use the SQLite database for development, testing, and production.","category":"page"},{"location":"developing-genie-web-application/#Running-the-Application-Locally","page":"Developing a Genie Web Application","title":"Running the Application Locally","text":"","category":"section"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We should instantiate the web application to install it locally with Julia's built-in package manager when running it for the first time.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"using Pkg; Pkg.instantiate()","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Then, we can activate the web application.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"using Pkg; Pkg.activate(\".\")","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Next, let's import Genie and use the loadapp function for developing and running the application.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"using Genie; Genie.loadapp(\".\")","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Now, we can use the up function to run a local web server.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"up()","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"The local webserver should be running on http://localhost:8000/, and we can open it in the browser.","category":"page"},{"location":"developing-genie-web-application/#Adding-Resources-and-Routing","page":"Developing a Genie Web Application","title":"Adding Resources and Routing","text":"","category":"section"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We can create new resources using the new_resource function. We will create a resource named Items.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Genie.new_resource(\"Items\")","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"The function generates three files for the Items resource to app/resources/items/ directory:","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Items.jl contains the database models,\nItemsController.jl contains functions for handling requests by the users, and\nItemsValidator.jl handles database validation.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Inside Items.jl, we have created Item model, a mapping between objects in the database and Julia structs.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"import SearchLight: AbstractModel, DbId\nimport Base: @kwdef\n\n@kwdef mutable struct Item <: AbstractModel\n  id::DbId = DbId()\n  a::String = \"\"\n  b::Int = 0\nend","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We define routes in the routes.jl file, which are mapped to the static files in public/ and dynamic resources in app/resources/. When a server is running, making a request on a route invokes the corresponding handler function in the resources and returns a response based on its output.","category":"page"},{"location":"developing-genie-web-application/#Configuring-a-Database","page":"Developing a Genie Web Application","title":"Configuring a Database","text":"","category":"section"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"Genie stores database configurations to db/ directory. For example, we can add configuration for SQLite on dev environment to db/connection.yml file as follows:","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"dev:\n  adapter: SQLite\n  database: data/database.sqlite\n  host:\n  username:\n  password:\n  port:\n  config:","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We can set up database tables if they don't exist with the following script.","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"using SearchLight\nusing SearchLightSQLite\n\n# Connect to database\nSearchLight.Configuration.load() |> SearchLight.connect\ntry\n    # Run migrations if they don't exist\n    SearchLight.Migrations.create_migrations_table()\n    SearchLight.Migrations.last_up()\ncatch\n    nothing\nend","category":"page"},{"location":"developing-genie-web-application/","page":"Developing a Genie Web Application","title":"Developing a Genie Web Application","text":"We have added it to the global configurations, config/env/global.jl.","category":"page"},{"location":"creating-docker-container/#Creating-a-Docker-Container","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"","category":"section"},{"location":"creating-docker-container/#Creating-a-Dockerfile","page":"Creating a Docker Container","title":"Creating a Dockerfile","text":"","category":"section"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Dockerfile defines how Docker builds a container image. We should also create a .dockerignore file which instructs Docker to ignore certain files such as automatically-generated files or version control (Git) files from the Docker image.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"We use julia:1.6-buster as the base image.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"FROM julia:1.6-buster","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Then, we create genie user inside the container.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"RUN useradd --create-home --shell /bin/bash genie","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Next, we create app directory inside the /home/genie directory, copy the application files into it while ignoring files specified in .dockerignore, and change our working directory to it.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"RUN mkdir /home/genie/app\nCOPY . /home/genie/app\nWORKDIR /home/genie/app","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Next, we give read, write and execution permissions and change ownership to the genie user with root group for the specified files. OpenShift requires permissions for the root group.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"RUN chgrp root /home/genie\nRUN chown genie:root -R *\nRUN chmod -R g+rw /home/genie/app\nRUN chmod g+rwX bin/server\nRUN chmod -R g+rwX /usr/local/julia","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Now, we change the user to genie with root group.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"USER genie:root","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"We specify environment variables for the Genie application with the ENV directive.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"ENV JULIA_DEPOT_PATH \"/home/genie/.julia\"\nENV GENIE_ENV \"prod\"\nENV HOST \"0.0.0.0\"\nENV PORT \"8000\"\nENV EARLYBIND \"true\"","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Now, we can install the application as a Julia package inside the container.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"RUN julia -e \"using Pkg; Pkg.activate(\\\".\\\"); Pkg.instantiate(); Pkg.precompile(); \"","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"We can remove the Julia registries afterward to reduce the container size.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"RUN rm -rf /genie/.julia/registries","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"We also need to give the root group execution permissions for files inside the .julia directory.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"RUN chmod -R -f g+rwX \\\n    /home/genie/.julia/packages \\\n    /home/genie/.julia/artifacts \\\n    /home/genie/.julia/compiled \\\n    /home/genie/.julia/logs","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"We will expose the container to networking using port 8000 via TCP.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"EXPOSE 8000/tcp","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"Finally, we set the container to execute the bin/server script to start the webserver when we run the container.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"CMD [\"bin/server\"]","category":"page"},{"location":"creating-docker-container/#Building-a-Docker-Image-Locally","page":"Creating a Docker Container","title":"Building a Docker Image Locally","text":"","category":"section"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"We should begin by installing Docker. Then, we can build a Docker image locally using the build command. The option -t defines the name and tag for the image. We can substitute the <name> with a name such as genie and <tag> with dev.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"sudo docker build -t <name>:<tag> .","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"After building the image, we can run it locally with the run command. The option -p publishes the container port 8000 to host post 8000 in this order.","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"sudo docker run -it -p 8000:8000 --rm <name>:<tag>","category":"page"},{"location":"creating-docker-container/","page":"Creating a Docker Container","title":"Creating a Docker Container","text":"The local webserver should be running on http://localhost:8000/, and we can open it in the browser.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = GenieWebApp","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia language is a relatively new, general-purpose programming language designed to address challenges in technical computing such as the expression problem and the two-language problem. It addresses the expression problem using multiple-dispatch as a paradigm that enables highly expressive syntax and composable code and the two-language problem using just-in-time compilation to create high-performance code. For these reasons, the Julia language is gaining popularity in scientific computing and data analysis because it offers significant improvements in performance and composability. That is, how existing code and libraries work with one another.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Traditionally, scientific computing programs run without user interaction as batch jobs on computer clusters and supercomputers. However, modern scientific computing and data analytics increasingly requires user interaction. For example, an analytics application may receive data from multiple sources over the internet, process the data, perform analysis, store results, and offer them to end-users on demand via an API. We can expose the analytics application over the internet as an on-demand service by wrapping it inside a web application or microservice and deploying it into a cloud platform. Given the advantages of the Julia language, it would be natural to develop the analytics application and the web application or microservice in Julia language.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In this repository, we explore how to build a Julia web application using the Genie framework and deploying it to a container-based cloud with OpenShift and a virtual machine-based cloud with OpenStack. We will use the Rahti and Pouta cloud computing resources provided by CSC, the Science Center for IT in Finland. Their documentation explains the main concepts of cloud computing, such as how cloud computing differs from traditional hosted services and high-performance computing, and basic terminology such as infrastructure-, platform-, and software-as-service.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"These intructions assume basic knowledge of Linux, Git, Julia language, and SQL databases. We recommend reading the Linux basics tutorial for understanding basic Linux command line usage. We have structured the sections in the following way:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Developing a Genie Web Application: In this section, we explain how to create a web application with Genie framework, a full-stack Model-View-Controller (MVC) web framework similar to Ruby-on-Rails and Django. Then, we explore how the MVC web application operates and create a REST API. For a general resource about web development, we recommend the MDN Web Docs and for an overview of best practices of developing web applications, we recommend The Twelve-Factor App guidelines. As a side note, it is also possible to develop Julia microservices without using a framework if you need more control over your application.\nCreating a Docker Container: In this section, we explain how to create a Docker container for the application and build and run a container image. Modern cloud architecture revolves around containers and container orchestration. We recommend reading the articles on Demystifying Containers to understand how containers work in Linux.\nDeploying to Container Cloud using OpenShift: In this section, we explain how to deploy the application from a container image to the Rahti cloud service using OpenShift. We also show how to set persistent storage for the application.\nDeploying to Virtual Machine using OpenStack: In this section, we explain how to deploy the application from source to a virtual machine on the Pouta cloud service using OpenStack. We also show how to set persistent storage for the application.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you are a part of Finnish research or higher education institutions, you can access many CSC services free of charge. If you plan to use CSC services, you can create a new project on My CSC and then apply for access to Pouta and Rahti.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Modules = [GenieWebApp]","category":"page"},{"location":"testing-requests-with-http-jl/#Testing-Requests-with-HTTP.jl","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"","category":"section"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"We can make requests to the server by accessing URLs in the browser or by sending requests to the server via the HTTP.jl library on the Julia REPL.","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"using HTTP\ndomain = \"http://localhost:8000\"","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"The domain variable should point to the domain where we host our application, such as localhost or server, once we deploy the application.","category":"page"},{"location":"testing-requests-with-http-jl/#Views","page":"Testing Requests with HTTP.jl","title":"Views","text":"","category":"section"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"By sending a GET request to the /items the server returns the HTML that shows the Items page.","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP.request(\"GET\", \"$domain/items\")","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nServer: Genie/1.0.0/Julia/1.6.1\nTransfer-Encoding: chunked\n\n<!DOCTYPE html><html lang=\"en\">...</html>","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"We can also POST forms programmatically.","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP.request(\"POST\", \"$domain/items\",\n    [],\n    HTTP.Form(Dict(\"a\"=>\"Hello World\", \"b\"=>\"1\")))","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP/1.1 200 OK\nContent-Type: multipart\nServer: Genie/1.18.1/Julia/1.6.1\nTransfer-Encoding: chunked\n\n...","category":"page"},{"location":"testing-requests-with-http-jl/#API","page":"Testing Requests with HTTP.jl","title":"API","text":"","category":"section"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"We have also implemented a JSON-based REST API on the application on the path /api/items. REST APIs are intended purely for programmatic use and access to the application.","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"If we send a GET request to the /api/items path, we receive a JSON object as a response.","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP.request(\"GET\", \"$domain/api/items\")","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nServer: Genie/1.0.0/Julia/1.6.1\nTransfer-Encoding: chunked\n\n[{\"id\":{\"value\":1},\"a\":\"asd\",\"b\":1}]","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"We can also send a JSON-formatted POST request to the /api/items, which will be parsed into a Julia dictionary by the application.","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP.request(\"POST\", \"$domain/api/items\",\n    [(\"Content-Type\", \"application/json\")],\n    \"\"\"{\"a\":\"Hello World\", \"b\":\"1\"}\"\"\")","category":"page"},{"location":"testing-requests-with-http-jl/","page":"Testing Requests with HTTP.jl","title":"Testing Requests with HTTP.jl","text":"HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nServer: Genie/1.18.1/Julia/1.6.1\nTransfer-Encoding: chunked","category":"page"}]
}
